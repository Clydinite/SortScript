# Example .order file for a React project

README.md @required
package.json @required
tsconfig.json

src/ {
  index.tsx @required
  App.tsx @required
  
  components/ {
    # Core UI components with explicit order
    Button.tsx @required
    Input.tsx @required
    Modal.tsx @required
    
    # Group all component-related files
    /^([A-Z][a-z]+)\.(tsx|ts|test\.tsx|stories\.tsx|module\.css)$/ {
      @groupby($1)
      @tiebreaker(@enum($2, ["tsx", "ts", "test.tsx", "stories.tsx", "module.css"]))
      @allowif(/^[A-Z]/)  # Component names must start with capital
      @metadata({"type": "component", "framework": "react"})
    }
    
    # Utility components
    utils/ {
      /^([a-z][a-zA-Z0-9]*)\.(ts|tsx|test\.ts)$/ {
        @groupby($1)
        @tiebreaker(@enum($2, ["ts", "tsx", "test.ts"]))
        @allowif(/^[a-z]/)  # Utility names start with lowercase
      }
    }
  }
  
  hooks/ {
    # Custom React hooks
    /^use([A-Z][a-z]+)\.(ts|test\.ts)$/ {
      @groupby($1)
      @tiebreaker(@enum($2, ["ts", "test.ts"]))
      @metadata({"type": "hook"})
    }
  }
  
  services/ {
    # API services
    /^([a-z][a-zA-Z0-9]*)(Service|Client)\.(ts|test\.ts)$/ {
      @groupby($1)
      @tiebreaker(@enum($2, ["Service", "Client"]), @enum($3, ["ts", "test.ts"]))
      @metadata({"type": "service"})
    }
  }
  
  types/ {
    # TypeScript type definitions
    *.ts {
      @allowif(/\.types\.ts$|\.d\.ts$/)
      @tiebreaker(@alphabetical)
      @metadata({"type": "types"})
    }
  }
}

# Test files
tests/ {
  *.test.{ts,tsx} {
    @tiebreaker(@alphabetical)
    @metadata({"type": "test"})
  }
}

# Documentation
docs/ {
  README.md @required
  *.md {
    @tiebreaker(@alphabetical)
  }
}

# Configuration files at root level
@tiebreaker(@alphabetical)

